{"version":3,"sources":["services/exchange-api.client.ts","services/local-storage.client.ts","services/index.ts","features/App/state/actions.ts","features/App/state/epic.ts","store/root-epic.ts","features/App/state/reducer.ts","store/root-reducer.ts","features/App/state/selectors.ts","store/index.ts","features/App/components/AssetList/AssetList.style.ts","features/App/components/AssetList/AssetList.tsx","features/App/components/SingleAsset/SingleAsset.style.ts","features/App/components/SingleAsset/SingleAsset.tsx","features/App/components/AddAsset/AddAsset.style.ts","features/App/components/AddAsset/AddAsset.tsx","features/App/components/ErrorTooltip/ErrorTooltip.style.ts","features/App/components/ErrorTooltip/ErrorTooltip.tsx","features/App/App.style.tsx","features/App/App.tsx","assets/theme.ts","assets/fonts.ts","reportWebVitals.ts","index.tsx"],"names":["getTickers","a","axios","request","method","url","data","getL2","symbol","version","packageJson","appName","name","PREFIX","set","key","value","localStorage","serializedValue","JSON","stringify","setItem","error","Error","get","getItem","parse","ExchangeAPI","LocalStorage","fetchAvailableAssets","createAsyncAction","fetchSingleAsset","initAssetList","createAction","deleteAsset","id","addAsset","comment","of","actions","updateAvailableAssets","timer","pipe","mapTo","action$","state$","filter","isActionOf","mergeMap","from","map","assetList","last_trade_price","split","currency","push","cuid","price","catchError","throwError","success","failure","getSingleAsset","payload","bids","asks","orders","bid","offers","ask","combineEpics","Object","values","App","services","appInitState","availableAssets","singleAsset","undefined","app","createReducer","handleAction","state","action","initialAssets","cloneDeep","asset","find","updatedAssets","reducers","combineReducers","getAssetList","getAvailableAssets","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","configureStore","initialState","epicMiddleware","createEpicMiddleware","dependencies","middlewares","enhancer","applyMiddleware","store","createStore","rootReducer","run","rootEpic","makeStyles","theme","maxWidth","width","maxHeight","height","AssetList","classes","useStyles","dispatch","useDispatch","history","useHistory","Assets","useSelector","columns","useMemo","field","headerName","flex","type","sortable","disableClickEventBubbling","renderCell","row","Button","onClick","className","onRowClick","rows","pageSize","SingleAsset","useParams","useEffect","addAssetDialog","minWidth","addAssetContent","marginBottom","tooltip","backgroundColor","color","arrow","alignSelf","AddAsset","isOpen","onClose","initialValues","onSubmit","resetForm","enableReinitialize","validationSchema","Yup","shape","min","required","props","handleSubmit","handleChange","setFieldValue","errors","Dialog","open","DialogTitle","DialogContent","title","Autocomplete","options","autoComplete","onChange","e","getOptionLabel","renderInput","params","TextField","variant","placeholder","label","fullWidth","multiline","DialogActions","fontSize","ErrorTooltip","children","Tooltip","placement","display","justifyContent","flexDirection","alignItems","padding","appBar","content","useState","openDialog","setOpenDialog","AppBar","position","Toolbar","path","exact","render","size","Fab","CssBaseline","createMuiTheme","defaultFonts","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","WebFont","load","google","families","ReactDOM","ThemeProvider","document","getElementById","bootstrap"],"mappings":"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","file":"static/js/main.26fd0915.chunk.js","sourcesContent":["import { ExchangeAPI } from \"Models\";\r\nimport axios from \"axios\";\r\n\r\nexport const getTickers = async (): Promise<ExchangeAPI.TickersResponse> => {\r\n  const { data } = await axios.request<ExchangeAPI.TickersResponse>({\r\n    method: \"get\",\r\n    url: \"https://api.blockchain.com/v3/exchange/tickers\",\r\n  });\r\n  return data;\r\n};\r\n\r\nexport const getL2 = async ({\r\n  symbol,\r\n}: ExchangeAPI.L2Request): Promise<ExchangeAPI.L2Response> => {\r\n  const { data } = await axios.request<ExchangeAPI.L2Response>({\r\n    method: \"get\",\r\n    url: `https://api.blockchain.com/v3/exchange/l2/${symbol}`,\r\n  });\r\n  return data;\r\n};\r\n","import packageJson from \"../../package.json\";\r\n\r\nconst version = packageJson.version || 0;\r\nconst appName = packageJson.name || 0;\r\nconst PREFIX = `${appName}::${version}::`;\r\n\r\nexport const set = <T = object>(key: string, value: T): void => {\r\n  if (!localStorage) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const serializedValue = JSON.stringify(value);\r\n    localStorage.setItem(PREFIX + key, serializedValue);\r\n  } catch (error) {\r\n    throw new Error(\"store serialization failed\");\r\n  }\r\n};\r\n\r\nexport const get = <T = object>(key: string): T | undefined => {\r\n  if (!localStorage) {\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const serializedValue = localStorage.getItem(PREFIX + key);\r\n    if (serializedValue == null) {\r\n      return;\r\n    }\r\n    return JSON.parse(serializedValue);\r\n  } catch (error) {\r\n    throw new Error(\"store deserialization failed\");\r\n  }\r\n};\r\n","import * as ExchangeAPI from \"./exchange-api.client\";\r\nimport * as LocalStorage from \"./local-storage.client\";\r\n\r\nexport default {\r\n  ExchangeAPI,\r\n  LocalStorage,\r\n};\r\n","import { createAsyncAction, createAction } from \"typesafe-actions\";\r\nimport { Asset, SingleAsset } from \"Models\";\r\n\r\nexport const fetchAvailableAssets = createAsyncAction(\r\n  \"@app fetchAvailableAssets Request\",\r\n  \"@app fetchAvailableAssets Success\",\r\n  \"@app fetchAvailableAssets Failure\"\r\n)<void, Array<Asset>, Error>();\r\n\r\nexport const fetchSingleAsset = createAsyncAction(\r\n  \"@app fetchSingleAsset Request\",\r\n  \"@app fetchSingleAsset Success\",\r\n  \"@app fetchSingleAsset Failure\"\r\n)<string, SingleAsset, Error>();\r\n\r\nexport const initAssetList = createAction(\"@app initAssetList\")();\r\n\r\nexport const deleteAsset = createAction(\r\n  \"@app deleteAsset\",\r\n  (id: string) => id\r\n)<string>();\r\n\r\nexport const addAsset = createAction(\r\n  \"@app addAsset\",\r\n  ({ symbol, comment }: { symbol: string; comment?: string }) => ({\r\n    symbol,\r\n    comment,\r\n  })\r\n)<{ symbol: string; comment: string }>();\r\n","import { catchError, mergeMap, map, filter, mapTo } from \"rxjs/operators\";\r\nimport { throwError, from, of, timer } from \"rxjs\";\r\nimport { RootEpic } from \"Models\";\r\nimport { isActionOf } from \"typesafe-actions\";\r\nimport cuid from \"cuid\";\r\n\r\nimport * as actions from \"./actions\";\r\n\r\nexport const initAssetList: RootEpic = () => of(actions.initAssetList());\r\nexport const updateAvailableAssets: RootEpic = () =>\r\n  timer(0, 300000).pipe(mapTo(actions.fetchAvailableAssets.request()));\r\n\r\nexport const fetchAvailableAssets: RootEpic = (\r\n  action$,\r\n  state$,\r\n  { ExchangeAPI }\r\n) =>\r\n  action$.pipe(\r\n    filter(isActionOf(actions.fetchAvailableAssets.request)),\r\n    mergeMap(() => from(ExchangeAPI.getTickers())),\r\n    map((data) => {\r\n      if (!data) return [];\r\n\r\n      let assetList = [];\r\n\r\n      for (const { last_trade_price, symbol } of data) {\r\n        const name = symbol.split(\"-\")[0];\r\n        const currency = symbol.split(\"-\")[1];\r\n        if (currency === \"USD\") {\r\n          assetList.push({\r\n            id: cuid(),\r\n            symbol,\r\n            name,\r\n            currency,\r\n            price: last_trade_price,\r\n          });\r\n        }\r\n      }\r\n\r\n      return assetList;\r\n    }),\r\n    catchError((error) => throwError(error)),\r\n    map((data) => actions.fetchAvailableAssets.success(data)),\r\n    catchError((error: Error) =>\r\n      of(actions.fetchAvailableAssets.failure(error))\r\n    )\r\n  );\r\n\r\nexport const getSingleAsset: RootEpic = (action$, state$, { ExchangeAPI }) =>\r\n  action$.pipe(\r\n    filter(isActionOf(actions.fetchSingleAsset.request)),\r\n    mergeMap(({ payload: symbol }) => from(ExchangeAPI.getL2({ symbol }))),\r\n    map(({ bids, asks, symbol }) => {\r\n      const singleAsset = {\r\n        symbol,\r\n        orders: bids.map((bid) => ({ ...bid, id: cuid() })),\r\n        offers: asks.map((ask) => ({ ...ask, id: cuid() })),\r\n      };\r\n\r\n      return singleAsset;\r\n    }),\r\n    catchError((error) => throwError(error)),\r\n    map((data) => actions.fetchSingleAsset.success(data)),\r\n    catchError((error: Error) => of(actions.fetchSingleAsset.failure(error)))\r\n  );\r\n","import { combineEpics } from \"redux-observable\";\r\n\r\nimport * as App from \"../features/App/state/epic\";\r\n\r\nexport default combineEpics(...Object.values(App));\r\n","import { createReducer } from \"typesafe-actions\";\r\nimport { RootActions, AppState, Asset } from \"Models\";\r\nimport { cloneDeep } from \"lodash\";\r\nimport services from \"services\";\r\n\r\nimport * as actions from \"./actions\";\r\n\r\nconst LocalStorage = services.LocalStorage;\r\n\r\nconst appInitState: AppState = {\r\n  assetList: [],\r\n  availableAssets: [],\r\n  singleAsset: undefined,\r\n};\r\n\r\nconst app = createReducer<AppState, RootActions>(appInitState)\r\n  .handleAction(actions.initAssetList, (state) => {\r\n    let assetList = LocalStorage.get<Asset[]>(\"assetList\");\r\n    if (!assetList) {\r\n      assetList = appInitState.assetList;\r\n      LocalStorage.set(\"assetList\", assetList);\r\n    }\r\n    return { ...state, assetList };\r\n  })\r\n  .handleAction(actions.fetchAvailableAssets.success, (state, action) => {\r\n    return { ...state, availableAssets: action.payload };\r\n  })\r\n  .handleAction(actions.deleteAsset, (state, action) => {\r\n    let assetList = [];\r\n    const initialAssets = cloneDeep(state.assetList);\r\n    for (const asset of initialAssets) {\r\n      if (asset.id !== action.payload) {\r\n        assetList.push(cloneDeep(asset));\r\n      }\r\n    }\r\n\r\n    LocalStorage.set(\"assetList\", assetList);\r\n    return { ...state, assetList };\r\n  })\r\n  .handleAction(actions.addAsset, (state, action) => {\r\n    const asset = state.availableAssets.find(\r\n      ({ symbol }) => symbol === action.payload.symbol\r\n    );\r\n    if (!asset) return state;\r\n\r\n    const updatedAssets = cloneDeep(state.assetList);\r\n    updatedAssets.push({\r\n      ...asset,\r\n      comment: action.payload.comment,\r\n    });\r\n    LocalStorage.set(\"assetList\", updatedAssets);\r\n\r\n    return { ...state, assetList: updatedAssets };\r\n  })\r\n  .handleAction(actions.fetchSingleAsset.success, (state, action) => {\r\n    return { ...state, singleAsset: action.payload };\r\n  });\r\n\r\nexport default app;\r\n","import { combineReducers } from \"redux\";\r\nimport App from \"features/App/state/reducer\";\r\n\r\nconst reducers = combineReducers({\r\n  App,\r\n});\r\n\r\nexport default reducers;\r\n","import { RootState } from \"Models\";\r\n\r\nexport const getAssetList = (state: RootState) => state.App.assetList;\r\nexport const getSingleAsset = (state: RootState) => state.App.singleAsset;\r\nexport const getAvailableAssets = (state: RootState) => state.App.availableAssets;\r\n","import { applyMiddleware, compose, createStore } from \"redux\";\r\nimport { createEpicMiddleware } from \"redux-observable\";\r\nimport { RootActions, RootState, Services } from \"Models\";\r\nimport services from \"services\";\r\n\r\nimport rootEpic from \"./root-epic\";\r\nimport rootReducer from \"./root-reducer\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\n// Create store\r\nconst configureStore = (initialState?: RootState) => {\r\n  // configure middlewares\r\n  const epicMiddleware = createEpicMiddleware<\r\n    RootActions,\r\n    RootActions,\r\n    RootState,\r\n    Services\r\n  >({\r\n    dependencies: services,\r\n  });\r\n  const middlewares = [epicMiddleware];\r\n  // compose enhancers\r\n  const enhancer = composeEnhancers(applyMiddleware(...middlewares));\r\n  // create store\r\n  const store = createStore(rootReducer, initialState, enhancer);\r\n\r\n  epicMiddleware.run(rootEpic);\r\n  return store;\r\n};\r\n\r\nexport * from \"./root-actions\";\r\nexport * from \"./root-selectors\";\r\n\r\nexport default configureStore;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles((theme) => ({\r\n  assetList: {\r\n    maxWidth: \"1200px\",\r\n    width: \"100%\",\r\n    maxHeight: \"790px\",\r\n    height: \"100%\",\r\n  },\r\n}));\r\n","import React, { useMemo } from 'react'\r\nimport { DataGrid, GridColumns, } from '@material-ui/data-grid';\r\nimport { Button } from \"@material-ui/core\";\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { getAssetList, deleteAsset } from \"store\"\r\n\r\nimport useStyles from \"./AssetList.style\";\r\n\r\n\r\nconst AssetList = () => {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const Assets = useSelector(getAssetList)\r\n    const columns: GridColumns = useMemo(() => [\r\n        {\r\n            field: 'symbol',\r\n            headerName: 'Asset',\r\n            width: 120,\r\n\r\n        },\r\n        {\r\n            field: 'name', headerName: 'Name',\r\n            width: 120\r\n        },\r\n        { field: 'comment', headerName: 'Comment', flex: 1 },\r\n        {\r\n            field: 'price',\r\n            headerName: 'Price',\r\n            type: 'number',\r\n            width: 120\r\n\r\n        },\r\n        {\r\n            field: \"\",\r\n            headerName: \"Action\",\r\n            sortable: false,\r\n            disableClickEventBubbling: true,\r\n            renderCell: ({ row: { id } }) => {\r\n                return (\r\n                    <Button\r\n                        onClick={() => dispatch(deleteAsset(id))} >\r\n                        Remove\r\n                    </Button >\r\n                )\r\n            }\r\n\r\n        }\r\n    ], [dispatch])\r\n    return (\r\n        <div className={classes.assetList}>\r\n            <DataGrid\r\n                onRowClick={({ row: { symbol } }) => history.push(`/${symbol}`)}\r\n                rows={Assets}\r\n                columns={columns}\r\n                pageSize={13} />\r\n        </div>\r\n    )\r\n}\r\nexport default AssetList\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles((theme) => ({\r\n  singleAsset: {\r\n    maxWidth: \"1200px\",\r\n    maxHeight: \"790px\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n}));\r\n","import React, { useEffect, useMemo } from 'react'\r\nimport { DataGrid, GridColumns, } from '@material-ui/data-grid';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchSingleAsset, getSingleAsset } from \"store\";\r\n\r\nimport useStyles from \"./SingleAsset.style\";\r\n\r\nconst SingleAsset = () => {\r\n    const { symbol } = useParams<{ symbol: string }>()\r\n    const dispatch = useDispatch()\r\n    const singleAsset = useSelector(getSingleAsset)\r\n\r\n    const classes = useStyles()\r\n    useEffect(() => {\r\n\r\n        dispatch(fetchSingleAsset.request(symbol))\r\n\r\n    }, [symbol, dispatch])\r\n\r\n    const rows = useMemo(() => singleAsset?.orders || [], [singleAsset])\r\n\r\n    const columns: GridColumns = useMemo(() => [\r\n        {\r\n            field: 'num', headerName: 'Number of orders', flex: 1\r\n        },\r\n        {\r\n            field: 'qty', headerName: 'Quantity', flex: 1\r\n        },\r\n        {\r\n            field: 'px', headerName: 'Price', flex: 1\r\n        },\r\n    ], [])\r\n    return (\r\n        <div className={classes.singleAsset}>\r\n            <DataGrid rows={rows} columns={columns} pageSize={13} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleAsset\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles((theme) => ({\r\n  addAssetDialog: { minWidth: \"300px\" },\r\n  addAssetContent: {\r\n    \"& > *\": {\r\n      marginBottom: \"30px\",\r\n    },\r\n  },\r\n  tooltip: {\r\n    backgroundColor: \"#AF0101 !important\",\r\n    color: \"#ffffff !important\",\r\n  },\r\n  arrow: {\r\n    color: \"#AF0101 !important\",\r\n    alignSelf: \"end\",\r\n  },\r\n}));\r\n","import React, { useMemo } from 'react'\r\nimport { Asset } from \"Models\";\r\nimport { Formik, Form, FormikHelpers } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContent,\r\n    DialogActions,\r\n    TextField,\r\n    Button,\r\n} from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { getAvailableAssets, addAsset } from \"store\";\r\nimport { ErrorTooltip } from \"features/App/components\"\r\n\r\nimport useStyles from \"./AddAsset.style\";\r\n\r\ninterface PropTypes {\r\n    isOpen: boolean,\r\n    onClose: Function\r\n}\r\ninterface FormValues {\r\n    comment: string,\r\n    asset?: Asset\r\n}\r\nconst AddAsset = ({ isOpen = false, onClose }: PropTypes) => {\r\n    const classes = useStyles()\r\n    const dispatch = useDispatch()\r\n    const availableAssets = useSelector(getAvailableAssets)\r\n\r\n    const initialValues = useMemo((): FormValues => ({\r\n        comment: \"\",\r\n        asset: undefined\r\n    }), [])\r\n\r\n    const onSubmit = async (values: FormValues, { resetForm }: FormikHelpers<FormValues>) => {\r\n        dispatch(addAsset({\r\n            symbol: values?.asset?.symbol || \"\",\r\n            comment: values.comment\r\n        }))\r\n        resetForm()\r\n        onClose()\r\n    };\r\n    return (\r\n        <Formik\r\n            initialValues={initialValues}\r\n            onSubmit={onSubmit}\r\n            enableReinitialize={true}\r\n            validationSchema={Yup.object().shape({\r\n                comment: Yup.string()\r\n                    .min(3, \"Comment must be at least 3 characters long\"),\r\n                asset: Yup.object()\r\n                    .required(\"Asset is required.\")\r\n            })}\r\n        >\r\n            {(props) => {\r\n                const {\r\n                    handleSubmit,\r\n                    values,\r\n                    handleChange,\r\n                    setFieldValue,\r\n                    errors,\r\n                } = props;\r\n                return (\r\n                    <Dialog open={isOpen} >\r\n                        <Form onSubmit={handleSubmit} className={classes.addAssetDialog}>\r\n                            <DialogTitle >Add asset</DialogTitle>\r\n                            <DialogContent className={classes.addAssetContent}>\r\n                                <ErrorTooltip title={errors.asset}>\r\n                                    <Autocomplete\r\n                                        id=\"city_id\"\r\n                                        options={availableAssets}\r\n                                        autoComplete\r\n                                        onChange={(e, asset) => setFieldValue(\"asset\", asset || initialValues.asset)}\r\n                                        getOptionLabel={({ symbol }) => symbol}\r\n\r\n                                        renderInput={(params: any) => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                type=\"text\"\r\n                                                name=\"asset\"\r\n                                                variant='outlined'\r\n                                                placeholder=\"Enter asset name\"\r\n                                                label=\"Add asset\"\r\n\r\n                                            />\r\n                                        )}\r\n\r\n                                    />\r\n                                </ErrorTooltip>\r\n                                <ErrorTooltip title={errors.comment}>\r\n                                    <TextField\r\n                                        type=\"text\"\r\n                                        name=\"comment\"\r\n                                        variant='outlined'\r\n                                        placeholder=\"Enter asset comment\"\r\n                                        label=\"Custom comment\"\r\n                                        fullWidth\r\n                                        multiline\r\n                                        rows={4}\r\n                                        onChange={handleChange}\r\n                                        value={values.comment}\r\n                                        error={!!errors.comment}\r\n                                    ></TextField>\r\n                                </ErrorTooltip>\r\n                            </DialogContent>\r\n                            <DialogActions>\r\n\r\n                                <Button\r\n                                    onClick={() => onClose()}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                >\r\n                                    Cancel\r\n                            </Button>\r\n                                <Button\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                >\r\n                                    Submit\r\n                            </Button>\r\n                            </DialogActions>\r\n\r\n                        </Form>\r\n\r\n                    </Dialog>\r\n                );\r\n            }}\r\n        </Formik >\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default AddAsset\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles((theme) => ({\r\n  tooltip: {\r\n    backgroundColor: \"#AF0101 !important\",\r\n    color: \"#ffffff !important\",\r\n    fontSize: \"10px\",\r\n  },\r\n  arrow: {\r\n    color: \"#AF0101 !important\",\r\n    alignSelf: \"end\",\r\n  },\r\n}));\r\n","import React from \"react\";\r\nimport { Tooltip } from \"@material-ui/core\";\r\n\r\nimport useStyles from \"./ErrorTooltip.style\";\r\n\r\ninterface PropTypes {\r\n  children: any,\r\n  title?: string\r\n}\r\nconst ErrorTooltip = ({ children, title = \"\" }: PropTypes) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Tooltip\r\n      arrow\r\n      placement=\"top-end\"\r\n      open={!!title}\r\n      title={title}\r\n      classes={{\r\n        tooltip: classes.tooltip,\r\n        arrow: classes.arrow,\r\n      }}\r\n    >\r\n      {children}\r\n    </Tooltip>\r\n  );\r\n};\r\n\r\nexport default ErrorTooltip;\r\n","import { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nexport default makeStyles((theme) => ({\r\n    app: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n        padding: \"0px 20px\"\r\n    },\r\n    appBar: {\r\n        maxWidth: \"1200px\",\r\n        maxHeight: \"790px\",\r\n        width: \"100%\",\r\n    },\r\n    content: {\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n    }\r\n}))","import React, { useState } from 'react'\r\nimport { Route } from \"react-router-dom\";\r\nimport { CssBaseline, AppBar, Toolbar, Button, Fab } from '@material-ui/core';\r\nimport { AssetList, SingleAsset, AddAsset } from \"features/App/components\";\r\nimport { ArrowBackIos as BackIcon } from '@material-ui/icons';\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport useStyles from \"./App.style\";\r\n\r\nconst App = () => {\r\n    const classes = useStyles()\r\n    const [openDialog, setOpenDialog] = useState(false)\r\n    const history = useHistory();\r\n    return (\r\n\r\n        <div className={classes.app}>\r\n            <AddAsset\r\n                isOpen={openDialog}\r\n                onClose={() => setOpenDialog(false)}\r\n            />\r\n            <AppBar position=\"static\" className={classes.appBar}>\r\n                <Toolbar>\r\n                    <Route\r\n                        path=\"/\"\r\n                        exact\r\n                        render={() => (\r\n                            <Button\r\n                                size={\"large\"}\r\n                                variant={\"contained\"}\r\n                                onClick={() => setOpenDialog(true)}\r\n                            >\r\n                                Add new asset\r\n                            </Button>\r\n                        )}\r\n                    />\r\n                    <Route\r\n                        path=\"/:symbol\"\r\n                        render={() => (\r\n                            <Fab\r\n                                size=\"medium\"\r\n                                variant=\"extended\"\r\n                                onClick={() => history.push(\"/\")}\r\n                            >\r\n                                <BackIcon />\r\n                            </Fab>\r\n                        )}\r\n                    />\r\n                </Toolbar>\r\n            </AppBar>\r\n            <CssBaseline />\r\n            <Route\r\n                path=\"/\"\r\n                exact\r\n                render={() => <AssetList />}\r\n            />\r\n            <Route\r\n                path=\"/:symbol\"\r\n                render={() => <SingleAsset />}\r\n            />\r\n\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default App\r\n","import { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\nexport const customProperties = {};\r\n\r\nexport const theme = createMuiTheme({\r\n  ...customProperties,\r\n});\r\n\r\nexport default theme;\r\n","export const defaultFonts = [\"Roboto:300,400,700,800,900\"];\r\nexport default defaultFonts;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { App } from 'features';\r\nimport { Provider } from \"react-redux\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport configureStore from \"store\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\nimport WebFont from \"webfontloader\";\r\n\r\nimport { theme } from \"./assets/theme\";\r\nimport { defaultFonts } from \"./assets/fonts\";\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport 'assets/global.scss';\r\n\r\nconst bootstrap = async () => {\r\n  const store = configureStore()\r\n\r\n  WebFont.load({\r\n    google: {\r\n      families: defaultFonts,\r\n    },\r\n  });\r\n  ReactDOM.render(\r\n    <Provider store={store}>\r\n      <ThemeProvider theme={theme}>\r\n        <BrowserRouter>\r\n          <App />\r\n        </BrowserRouter>\r\n      </ThemeProvider>\r\n    </Provider>,\r\n    document.getElementById('root')\r\n  );\r\n};\r\nbootstrap();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}